package ring

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/ed25519"
	"crypto/rsa"
	"errors"
	"fmt"
	"log"

	"golang.org/x/crypto/ssh"
)

type Signature struct {
	Msg          []byte
	Proofs       [][]byte
	Challenges   []challenge
	Fingerprints []string
}

func setupTranscript(pks []PublicKey, msg []byte) *transcript {
	tx := NewTranscript()
	tx.Append(msg)
	for _, pk := range pks {
		tx.Append([]byte(ssh.FingerprintSHA256(pk.pk)))
	}
	return tx
}

func (sig *Signature) Verify(pks []PublicKey) ([]byte, error) {
	// index by fingerprints
	keyMap := make(map[string]PublicKey)
	for _, pk := range pks {
		keyMap[pk.FP()] = pk
	}

	// lookup subset of keys included in the signature
	// (the signature might be for a smaller ring, e.g. keys may have been added later)
	selectPks := make([]PublicKey, 0, len(sig.Fingerprints))
	for _, fp := range sig.Fingerprints {
		if pk, ok := keyMap[fp]; ok {
			selectPks = append(selectPks, pk)
		} else {
			return nil, errors.New("the ring is not a subset of the public keys used to verify")
		}
	}

	return sig.VerifyExact(selectPks)
}

func (sig *Signature) VerifyExact(pks []PublicKey) ([]byte, error) {
	// commit to statement (list of public key)
	tx := setupTranscript(pks, sig.Msg)

	// basic checks
	if len(sig.Proofs) != len(pks) {
		return nil, errors.New("incorrect number of proofs")
	}
	if len(sig.Challenges) != len(pks) {
		return nil, errors.New("incorrect number of challenges")
	}
	if len(sig.Fingerprints) != len(pks) {
		return nil, errors.New("incorrect number of fingerprints")
	}

	// verify every proof
	for i, pk := range pks {
		// check fingerprint hint included in signature
		if pk.FP() != sig.Fingerprints[i] {
			return nil, errors.New("fingerprint does not match public key")
		}

		// pick proof type (based on public key)
		var pf proof
		switch pk.pk.Type() {
		case ssh.KeyAlgoED25519, ssh.KeyAlgoSKED25519:
			pf = &ed25519Proof{}
		case ssh.KeyAlgoRSA:
			pf = &rsaProof{}
		case ssh.KeyAlgoECDSA256, ssh.KeyAlgoECDSA384, ssh.KeyAlgoECDSA521, ssh.KeyAlgoSKECDSA256:
			pf = &ecdsaProof{}
		default:
			return nil, fmt.Errorf("unsupported key type: %s", pk.pk.Type())
		}

		// unmarshal proof
		if err := pf.Unmarshal(sig.Proofs[i]); err != nil {
			return nil, err
		}

		// check that challenge is right size
		chal := sig.Challenges[i]
		if !chal.IsValid() {
			return nil, errors.New("challenge is invalid (wrong length)")
		}

		// verify proof against challenge
		ckey := toCryptoPublicKey(pk)
		if err := pf.Verify(ckey, chal); err != nil {
			return nil, err
		}
		pf.Commit(tx)
	}

	// final check: challenges sum to zero
	delta := tx.Challenge()
	for _, chal := range sig.Challenges {
		delta.Add(chal)
	}

	if delta.IsZero() {
		return sig.Msg, nil
	} else {
		return nil, errors.New("challenges does not sum to zero")
	}
}

func Sign(pair KeyPair, pks []PublicKey, msg []byte) Signature {
	// commit to statement (list of public key)
	tx := setupTranscript(pks, msg)

	index := len(pks)
	for i := range pks {
		if pair.PK.Equals(pks[i]) {
			index = i
		}
	}

	// sanity checks
	if index == len(pks) {
		panic("public keys does not contain pair, this is a bug.")
	}
	if msg == nil {
		panic("nil message")
	}

	// generate random challenges for in-active clauses
	challenges := make([]challenge, len(pks))
	for i := range challenges {
		if i != index {
			challenges[i].Random()
		}
	}

	// construct appropiate prover
	var prover prover
	skCkey := pair.SK.(crypto.PrivateKey)

	// detect ed25519 key
	if sk, ok := skCkey.(*ed25519.PrivateKey); ok {
		prover = ed25519Prove(*sk)
	}

	// detect RSA key
	if sk, ok := skCkey.(*rsa.PrivateKey); ok {
		prover = rsaProve(sk)
	}

	if sk, ok := skCkey.(*ecdsa.PrivateKey); ok {
		prover = ecdsaProve(sk)
	}

	if prover == nil {
		panic(pair.SK)
		panic(fmt.Errorf("unrecognized private key-type %t", skCkey))
	}

	// the proof for the active index is generated by the honest prover
	pfs := make([]proof, len(pks))
	pfs[index] = prover.Pf()

	// simulate in-active clauses using SHVZK sim.
	for i, pk := range pks {
		if i == index {
			continue
		}

		chal := challenges[i]
		ckey := toCryptoPublicKey(pk)

		switch pk.pk.Type() {
		case ssh.KeyAlgoSKED25519, ssh.KeyAlgoED25519:
			pfs[i] = ed25519Sim(ckey.(ed25519.PublicKey), chal)
		case ssh.KeyAlgoRSA:
			pfs[i] = rsaSim(ckey.(*rsa.PublicKey), chal)
		case ssh.KeyAlgoSKECDSA256, ssh.KeyAlgoECDSA256, ssh.KeyAlgoECDSA384, ssh.KeyAlgoECDSA521:
			pfs[i] = ecdsaSim(ckey.(*ecdsa.PublicKey), chal)
		default:
			log.Fatalln("unsupported key type:", pk.pk.Type())
		}
	}

	// commit to first round messages
	for _, pf := range pfs {
		pf.Commit(tx)
	}

	// sample challenge
	challenges[index] = tx.Challenge()

	// compute challenge for active clause
	// (challenges and tx.Challenge sums to 0)
	for i, chal := range challenges {
		if i != index {
			challenges[index].Add(chal)
		}
	}

	// finish transcript for active clause
	prover.Finish(challenges[index])
	pfs[index] = prover.Pf()

	// compile combined signature
	sig := Signature{
		Msg:          msg,
		Challenges:   challenges,
		Proofs:       make([][]byte, len(pfs)),
		Fingerprints: make([]string, len(pks)),
	}

	// serialize all the proofs
	for i, pf := range pfs {
		sig.Proofs[i] = pf.Marshal()
	}

	// add fingerprints to signature
	// (to enable verifying against a superset of keys)
	for i, pk := range pks {
		sig.Fingerprints[i] = ssh.FingerprintSHA256(pk.pk)
	}

	// check validity of generated signature: sanity check
	if _, err := sig.VerifyExact(pks); err != nil {
		panic(err)
	}

	return sig
}
